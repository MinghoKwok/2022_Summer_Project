// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapRes.proto

#include "mapRes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kernel {
constexpr mapRes_TestMapEntry_DoNotUse::mapRes_TestMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct mapRes_TestMapEntry_DoNotUseDefaultTypeInternal {
  constexpr mapRes_TestMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapRes_TestMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    mapRes_TestMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapRes_TestMapEntry_DoNotUseDefaultTypeInternal _mapRes_TestMapEntry_DoNotUse_default_instance_;
constexpr mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUseDefaultTypeInternal {
  constexpr mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUseDefaultTypeInternal() {}
  union {
    mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUseDefaultTypeInternal _mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse_default_instance_;
constexpr mapRes_FuncInfo_SASSLineInfo_Register::mapRes_FuncInfo_SASSLineInfo_Register(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reg_status_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u})
  , occupied_count_(uint64_t{0u}){}
struct mapRes_FuncInfo_SASSLineInfo_RegisterDefaultTypeInternal {
  constexpr mapRes_FuncInfo_SASSLineInfo_RegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapRes_FuncInfo_SASSLineInfo_RegisterDefaultTypeInternal() {}
  union {
    mapRes_FuncInfo_SASSLineInfo_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapRes_FuncInfo_SASSLineInfo_RegisterDefaultTypeInternal _mapRes_FuncInfo_SASSLineInfo_Register_default_instance_;
constexpr mapRes_FuncInfo_SASSLineInfo::mapRes_FuncInfo_SASSLineInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reg_gpr_(nullptr)
  , reg_pred_(nullptr)
  , reg_ugpr_(nullptr)
  , reg_upred_(nullptr)
  , src_line_(uint64_t{0u}){}
struct mapRes_FuncInfo_SASSLineInfoDefaultTypeInternal {
  constexpr mapRes_FuncInfo_SASSLineInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapRes_FuncInfo_SASSLineInfoDefaultTypeInternal() {}
  union {
    mapRes_FuncInfo_SASSLineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapRes_FuncInfo_SASSLineInfoDefaultTypeInternal _mapRes_FuncInfo_SASSLineInfo_default_instance_;
constexpr mapRes_FuncInfo::mapRes_FuncInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srcfileset_()
  , codeset_()
  , map_offset_src_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , sassline_()
  , funcname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reg_gpr_size_(uint64_t{0u})
  , reg_pred_size_(uint64_t{0u})
  , reg_ugpr_size_(uint64_t{0u})
  , reg_upred_size_(uint64_t{0u}){}
struct mapRes_FuncInfoDefaultTypeInternal {
  constexpr mapRes_FuncInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapRes_FuncInfoDefaultTypeInternal() {}
  union {
    mapRes_FuncInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapRes_FuncInfoDefaultTypeInternal _mapRes_FuncInfo_default_instance_;
constexpr mapRes::mapRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testmap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fi_(){}
struct mapResDefaultTypeInternal {
  constexpr mapResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mapResDefaultTypeInternal() {}
  union {
    mapRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mapResDefaultTypeInternal _mapRes_default_instance_;
}  // namespace kernel
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mapRes_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mapRes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mapRes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mapRes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_TestMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, name_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, size_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, occupied_count_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo_Register, reg_status_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, src_path_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, src_line_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, code_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, reg_gpr_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, reg_pred_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, reg_ugpr_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo_SASSLineInfo, reg_upred_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, funcname_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, srcfileset_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, codeset_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, map_offset_src_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, sassline_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, reg_gpr_size_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, reg_pred_size_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, reg_ugpr_size_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes_FuncInfo, reg_upred_size_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes, testmap_),
  PROTOBUF_FIELD_OFFSET(::kernel::mapRes, fi_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::kernel::mapRes_TestMapEntry_DoNotUse)},
  { 9, 16, sizeof(::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse)},
  { 18, 27, sizeof(::kernel::mapRes_FuncInfo_SASSLineInfo_Register)},
  { 31, 43, sizeof(::kernel::mapRes_FuncInfo_SASSLineInfo)},
  { 50, 64, sizeof(::kernel::mapRes_FuncInfo)},
  { 73, -1, sizeof(::kernel::mapRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_TestMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_FuncInfo_SASSLineInfo_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_FuncInfo_SASSLineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_FuncInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kernel::_mapRes_default_instance_),
};

const char descriptor_table_protodef_mapRes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014mapRes.proto\022\006kernel\"\265\007\n\006mapRes\022,\n\007tes"
  "tMap\030\001 \003(\0132\033.kernel.mapRes.TestMapEntry\022"
  "#\n\002FI\030\002 \003(\0132\027.kernel.mapRes.FuncInfo\032G\n\014"
  "TestMapEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\013"
  "2\027.kernel.mapRes.FuncInfo:\0028\001\032\216\006\n\010FuncIn"
  "fo\022\020\n\010funcname\030\001 \002(\t\022\022\n\nsrcFileSet\030\002 \003(\t"
  "\022\017\n\007codeSet\030\003 \003(\t\022A\n\016map_offset_src\030\004 \003("
  "\0132).kernel.mapRes.FuncInfo.MapOffsetSrcE"
  "ntry\0226\n\010SASSLine\030\005 \003(\0132$.kernel.mapRes.F"
  "uncInfo.SASSLineInfo\022\024\n\014reg_GPR_size\030\006 \001"
  "(\004\022\025\n\rreg_PRED_size\030\007 \001(\004\022\025\n\rreg_UGPR_si"
  "ze\030\010 \001(\004\022\026\n\016reg_UPRED_size\030\t \001(\004\032Y\n\021MapO"
  "ffsetSrcEntry\022\013\n\003key\030\001 \001(\004\0223\n\005value\030\002 \001("
  "\0132$.kernel.mapRes.FuncInfo.SASSLineInfo:"
  "\0028\001\032\230\003\n\014SASSLineInfo\022\020\n\010src_path\030\001 \002(\t\022\020"
  "\n\010src_line\030\002 \002(\004\022\014\n\004code\030\003 \002(\t\022>\n\007reg_GP"
  "R\030\004 \001(\0132-.kernel.mapRes.FuncInfo.SASSLin"
  "eInfo.Register\022\?\n\010reg_PRED\030\005 \001(\0132-.kerne"
  "l.mapRes.FuncInfo.SASSLineInfo.Register\022"
  "\?\n\010reg_UGPR\030\006 \001(\0132-.kernel.mapRes.FuncIn"
  "fo.SASSLineInfo.Register\022@\n\treg_UPRED\030\007 "
  "\001(\0132-.kernel.mapRes.FuncInfo.SASSLineInf"
  "o.Register\032R\n\010Register\022\014\n\004name\030\001 \001(\t\022\014\n\004"
  "size\030\002 \001(\004\022\026\n\016occupied_count\030\003 \001(\004\022\022\n\nre"
  "g_status\030\004 \003(\004"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mapRes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mapRes_2eproto = {
  false, false, 974, descriptor_table_protodef_mapRes_2eproto, "mapRes.proto", 
  &descriptor_table_mapRes_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_mapRes_2eproto::offsets,
  file_level_metadata_mapRes_2eproto, file_level_enum_descriptors_mapRes_2eproto, file_level_service_descriptors_mapRes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mapRes_2eproto_getter() {
  return &descriptor_table_mapRes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mapRes_2eproto(&descriptor_table_mapRes_2eproto);
namespace kernel {

// ===================================================================

mapRes_TestMapEntry_DoNotUse::mapRes_TestMapEntry_DoNotUse() {}
mapRes_TestMapEntry_DoNotUse::mapRes_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void mapRes_TestMapEntry_DoNotUse::MergeFrom(const mapRes_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata mapRes_TestMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[0]);
}

// ===================================================================

mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse() {}
mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::MergeFrom(const mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[1]);
}

// ===================================================================

class mapRes_FuncInfo_SASSLineInfo_Register::_Internal {
 public:
  using HasBits = decltype(std::declval<mapRes_FuncInfo_SASSLineInfo_Register>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_occupied_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

mapRes_FuncInfo_SASSLineInfo_Register::mapRes_FuncInfo_SASSLineInfo_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reg_status_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
}
mapRes_FuncInfo_SASSLineInfo_Register::mapRes_FuncInfo_SASSLineInfo_Register(const mapRes_FuncInfo_SASSLineInfo_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reg_status_(from.reg_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupied_count_) -
    reinterpret_cast<char*>(&size_)) + sizeof(occupied_count_));
  // @@protoc_insertion_point(copy_constructor:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
}

inline void mapRes_FuncInfo_SASSLineInfo_Register::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&occupied_count_) -
    reinterpret_cast<char*>(&size_)) + sizeof(occupied_count_));
}

mapRes_FuncInfo_SASSLineInfo_Register::~mapRes_FuncInfo_SASSLineInfo_Register() {
  // @@protoc_insertion_point(destructor:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mapRes_FuncInfo_SASSLineInfo_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mapRes_FuncInfo_SASSLineInfo_Register::ArenaDtor(void* object) {
  mapRes_FuncInfo_SASSLineInfo_Register* _this = reinterpret_cast< mapRes_FuncInfo_SASSLineInfo_Register* >(object);
  (void)_this;
}
void mapRes_FuncInfo_SASSLineInfo_Register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mapRes_FuncInfo_SASSLineInfo_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mapRes_FuncInfo_SASSLineInfo_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupied_count_) -
        reinterpret_cast<char*>(&size_)) + sizeof(occupied_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapRes_FuncInfo_SASSLineInfo_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.SASSLineInfo.Register.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 occupied_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_occupied_count(&has_bits);
          occupied_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 reg_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reg_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reg_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapRes_FuncInfo_SASSLineInfo_Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.SASSLineInfo.Register.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // optional uint64 occupied_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_occupied_count(), target);
  }

  // repeated uint64 reg_status = 4;
  for (int i = 0, n = this->_internal_reg_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reg_status(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  return target;
}

size_t mapRes_FuncInfo_SASSLineInfo_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 reg_status = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->reg_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reg_status_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size());
    }

    // optional uint64 occupied_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_occupied_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapRes_FuncInfo_SASSLineInfo_Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mapRes_FuncInfo_SASSLineInfo_Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapRes_FuncInfo_SASSLineInfo_Register::GetClassData() const { return &_class_data_; }

void mapRes_FuncInfo_SASSLineInfo_Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mapRes_FuncInfo_SASSLineInfo_Register *>(to)->MergeFrom(
      static_cast<const mapRes_FuncInfo_SASSLineInfo_Register &>(from));
}


void mapRes_FuncInfo_SASSLineInfo_Register::MergeFrom(const mapRes_FuncInfo_SASSLineInfo_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reg_status_.MergeFrom(from.reg_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      occupied_count_ = from.occupied_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapRes_FuncInfo_SASSLineInfo_Register::CopyFrom(const mapRes_FuncInfo_SASSLineInfo_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kernel.mapRes.FuncInfo.SASSLineInfo.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapRes_FuncInfo_SASSLineInfo_Register::IsInitialized() const {
  return true;
}

void mapRes_FuncInfo_SASSLineInfo_Register::InternalSwap(mapRes_FuncInfo_SASSLineInfo_Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reg_status_.InternalSwap(&other->reg_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo_SASSLineInfo_Register, occupied_count_)
      + sizeof(mapRes_FuncInfo_SASSLineInfo_Register::occupied_count_)
      - PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo_SASSLineInfo_Register, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mapRes_FuncInfo_SASSLineInfo_Register::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[2]);
}

// ===================================================================

class mapRes_FuncInfo_SASSLineInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<mapRes_FuncInfo_SASSLineInfo>()._has_bits_);
  static void set_has_src_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_line(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register& reg_gpr(const mapRes_FuncInfo_SASSLineInfo* msg);
  static void set_has_reg_gpr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register& reg_pred(const mapRes_FuncInfo_SASSLineInfo* msg);
  static void set_has_reg_pred(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register& reg_ugpr(const mapRes_FuncInfo_SASSLineInfo* msg);
  static void set_has_reg_ugpr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register& reg_upred(const mapRes_FuncInfo_SASSLineInfo* msg);
  static void set_has_reg_upred(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000043) ^ 0x00000043) != 0;
  }
};

const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register&
mapRes_FuncInfo_SASSLineInfo::_Internal::reg_gpr(const mapRes_FuncInfo_SASSLineInfo* msg) {
  return *msg->reg_gpr_;
}
const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register&
mapRes_FuncInfo_SASSLineInfo::_Internal::reg_pred(const mapRes_FuncInfo_SASSLineInfo* msg) {
  return *msg->reg_pred_;
}
const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register&
mapRes_FuncInfo_SASSLineInfo::_Internal::reg_ugpr(const mapRes_FuncInfo_SASSLineInfo* msg) {
  return *msg->reg_ugpr_;
}
const ::kernel::mapRes_FuncInfo_SASSLineInfo_Register&
mapRes_FuncInfo_SASSLineInfo::_Internal::reg_upred(const mapRes_FuncInfo_SASSLineInfo* msg) {
  return *msg->reg_upred_;
}
mapRes_FuncInfo_SASSLineInfo::mapRes_FuncInfo_SASSLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kernel.mapRes.FuncInfo.SASSLineInfo)
}
mapRes_FuncInfo_SASSLineInfo::mapRes_FuncInfo_SASSLineInfo(const mapRes_FuncInfo_SASSLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_path()) {
    src_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_path(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reg_gpr()) {
    reg_gpr_ = new ::kernel::mapRes_FuncInfo_SASSLineInfo_Register(*from.reg_gpr_);
  } else {
    reg_gpr_ = nullptr;
  }
  if (from._internal_has_reg_pred()) {
    reg_pred_ = new ::kernel::mapRes_FuncInfo_SASSLineInfo_Register(*from.reg_pred_);
  } else {
    reg_pred_ = nullptr;
  }
  if (from._internal_has_reg_ugpr()) {
    reg_ugpr_ = new ::kernel::mapRes_FuncInfo_SASSLineInfo_Register(*from.reg_ugpr_);
  } else {
    reg_ugpr_ = nullptr;
  }
  if (from._internal_has_reg_upred()) {
    reg_upred_ = new ::kernel::mapRes_FuncInfo_SASSLineInfo_Register(*from.reg_upred_);
  } else {
    reg_upred_ = nullptr;
  }
  src_line_ = from.src_line_;
  // @@protoc_insertion_point(copy_constructor:kernel.mapRes.FuncInfo.SASSLineInfo)
}

inline void mapRes_FuncInfo_SASSLineInfo::SharedCtor() {
src_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_gpr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&src_line_) -
    reinterpret_cast<char*>(&reg_gpr_)) + sizeof(src_line_));
}

mapRes_FuncInfo_SASSLineInfo::~mapRes_FuncInfo_SASSLineInfo() {
  // @@protoc_insertion_point(destructor:kernel.mapRes.FuncInfo.SASSLineInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mapRes_FuncInfo_SASSLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  src_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reg_gpr_;
  if (this != internal_default_instance()) delete reg_pred_;
  if (this != internal_default_instance()) delete reg_ugpr_;
  if (this != internal_default_instance()) delete reg_upred_;
}

void mapRes_FuncInfo_SASSLineInfo::ArenaDtor(void* object) {
  mapRes_FuncInfo_SASSLineInfo* _this = reinterpret_cast< mapRes_FuncInfo_SASSLineInfo* >(object);
  (void)_this;
}
void mapRes_FuncInfo_SASSLineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mapRes_FuncInfo_SASSLineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mapRes_FuncInfo_SASSLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      src_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reg_gpr_ != nullptr);
      reg_gpr_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reg_pred_ != nullptr);
      reg_pred_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reg_ugpr_ != nullptr);
      reg_ugpr_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(reg_upred_ != nullptr);
      reg_upred_->Clear();
    }
  }
  src_line_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapRes_FuncInfo_SASSLineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string src_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.SASSLineInfo.src_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 src_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_src_line(&has_bits);
          src_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.SASSLineInfo.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_GPR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_gpr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_PRED = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_pred(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UGPR = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_ugpr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UPRED = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_upred(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapRes_FuncInfo_SASSLineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_path().data(), static_cast<int>(this->_internal_src_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.SASSLineInfo.src_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_path(), target);
  }

  // required uint64 src_line = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_src_line(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.SASSLineInfo.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_GPR = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reg_gpr(this), target, stream);
  }

  // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_PRED = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reg_pred(this), target, stream);
  }

  // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UGPR = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reg_ugpr(this), target, stream);
  }

  // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UPRED = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reg_upred(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kernel.mapRes.FuncInfo.SASSLineInfo)
  return target;
}

size_t mapRes_FuncInfo_SASSLineInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  size_t total_size = 0;

  if (_internal_has_src_path()) {
    // required string src_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_path());
  }

  if (_internal_has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (_internal_has_src_line()) {
    // required uint64 src_line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src_line());
  }

  return total_size;
}
size_t mapRes_FuncInfo_SASSLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required string src_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_path());

    // required string code = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());

    // required uint64 src_line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src_line());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_GPR = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_gpr_);
    }

    // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_PRED = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_pred_);
    }

    // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UGPR = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_ugpr_);
    }

    // optional .kernel.mapRes.FuncInfo.SASSLineInfo.Register reg_UPRED = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_upred_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapRes_FuncInfo_SASSLineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mapRes_FuncInfo_SASSLineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapRes_FuncInfo_SASSLineInfo::GetClassData() const { return &_class_data_; }

void mapRes_FuncInfo_SASSLineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mapRes_FuncInfo_SASSLineInfo *>(to)->MergeFrom(
      static_cast<const mapRes_FuncInfo_SASSLineInfo &>(from));
}


void mapRes_FuncInfo_SASSLineInfo::MergeFrom(const mapRes_FuncInfo_SASSLineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src_path(from._internal_src_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reg_gpr()->::kernel::mapRes_FuncInfo_SASSLineInfo_Register::MergeFrom(from._internal_reg_gpr());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reg_pred()->::kernel::mapRes_FuncInfo_SASSLineInfo_Register::MergeFrom(from._internal_reg_pred());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reg_ugpr()->::kernel::mapRes_FuncInfo_SASSLineInfo_Register::MergeFrom(from._internal_reg_ugpr());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_reg_upred()->::kernel::mapRes_FuncInfo_SASSLineInfo_Register::MergeFrom(from._internal_reg_upred());
    }
    if (cached_has_bits & 0x00000040u) {
      src_line_ = from.src_line_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapRes_FuncInfo_SASSLineInfo::CopyFrom(const mapRes_FuncInfo_SASSLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kernel.mapRes.FuncInfo.SASSLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapRes_FuncInfo_SASSLineInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void mapRes_FuncInfo_SASSLineInfo::InternalSwap(mapRes_FuncInfo_SASSLineInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_path_, GetArenaForAllocation(),
      &other->src_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo_SASSLineInfo, src_line_)
      + sizeof(mapRes_FuncInfo_SASSLineInfo::src_line_)
      - PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo_SASSLineInfo, reg_gpr_)>(
          reinterpret_cast<char*>(&reg_gpr_),
          reinterpret_cast<char*>(&other->reg_gpr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mapRes_FuncInfo_SASSLineInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[3]);
}

// ===================================================================

class mapRes_FuncInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<mapRes_FuncInfo>()._has_bits_);
  static void set_has_funcname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reg_gpr_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reg_pred_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reg_ugpr_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reg_upred_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

mapRes_FuncInfo::mapRes_FuncInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srcfileset_(arena),
  codeset_(arena),
  map_offset_src_(arena),
  sassline_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kernel.mapRes.FuncInfo)
}
mapRes_FuncInfo::mapRes_FuncInfo(const mapRes_FuncInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      srcfileset_(from.srcfileset_),
      codeset_(from.codeset_),
      sassline_(from.sassline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_offset_src_.MergeFrom(from.map_offset_src_);
  funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_funcname()) {
    funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_funcname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reg_gpr_size_, &from.reg_gpr_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&reg_upred_size_) -
    reinterpret_cast<char*>(&reg_gpr_size_)) + sizeof(reg_upred_size_));
  // @@protoc_insertion_point(copy_constructor:kernel.mapRes.FuncInfo)
}

inline void mapRes_FuncInfo::SharedCtor() {
funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_gpr_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reg_upred_size_) -
    reinterpret_cast<char*>(&reg_gpr_size_)) + sizeof(reg_upred_size_));
}

mapRes_FuncInfo::~mapRes_FuncInfo() {
  // @@protoc_insertion_point(destructor:kernel.mapRes.FuncInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mapRes_FuncInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  funcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mapRes_FuncInfo::ArenaDtor(void* object) {
  mapRes_FuncInfo* _this = reinterpret_cast< mapRes_FuncInfo* >(object);
  (void)_this;
  _this->map_offset_src_. ~MapField();
}
inline void mapRes_FuncInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &mapRes_FuncInfo::ArenaDtor);
  }
}
void mapRes_FuncInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mapRes_FuncInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kernel.mapRes.FuncInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcfileset_.Clear();
  codeset_.Clear();
  map_offset_src_.Clear();
  sassline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    funcname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&reg_gpr_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reg_upred_size_) -
        reinterpret_cast<char*>(&reg_gpr_size_)) + sizeof(reg_upred_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapRes_FuncInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string funcname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_funcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.funcname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string srcFileSet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_srcfileset();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.srcFileSet");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string codeSet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codeset();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kernel.mapRes.FuncInfo.codeSet");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .kernel.mapRes.FuncInfo.SASSLineInfo> map_offset_src = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_offset_src_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kernel.mapRes.FuncInfo.SASSLineInfo SASSLine = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sassline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 reg_GPR_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reg_gpr_size(&has_bits);
          reg_gpr_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 reg_PRED_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reg_pred_size(&has_bits);
          reg_pred_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 reg_UGPR_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reg_ugpr_size(&has_bits);
          reg_ugpr_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 reg_UPRED_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reg_upred_size(&has_bits);
          reg_upred_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapRes_FuncInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kernel.mapRes.FuncInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string funcname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.funcname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_funcname(), target);
  }

  // repeated string srcFileSet = 2;
  for (int i = 0, n = this->_internal_srcfileset_size(); i < n; i++) {
    const auto& s = this->_internal_srcfileset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.srcFileSet");
    target = stream->WriteString(2, s, target);
  }

  // repeated string codeSet = 3;
  for (int i = 0, n = this->_internal_codeset_size(); i < n; i++) {
    const auto& s = this->_internal_codeset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kernel.mapRes.FuncInfo.codeSet");
    target = stream->WriteString(3, s, target);
  }

  // map<uint64, .kernel.mapRes.FuncInfo.SASSLineInfo> map_offset_src = 4;
  if (!this->_internal_map_offset_src().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::kernel::mapRes_FuncInfo_SASSLineInfo >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_offset_src().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_offset_src().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::kernel::mapRes_FuncInfo_SASSLineInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::kernel::mapRes_FuncInfo_SASSLineInfo >::const_iterator
          it = this->_internal_map_offset_src().begin();
          it != this->_internal_map_offset_src().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::kernel::mapRes_FuncInfo_SASSLineInfo >::const_iterator
          it = this->_internal_map_offset_src().begin();
          it != this->_internal_map_offset_src().end(); ++it) {
        target = mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .kernel.mapRes.FuncInfo.SASSLineInfo SASSLine = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sassline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sassline(i), target, stream);
  }

  // optional uint64 reg_GPR_size = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_reg_gpr_size(), target);
  }

  // optional uint64 reg_PRED_size = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_reg_pred_size(), target);
  }

  // optional uint64 reg_UGPR_size = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_reg_ugpr_size(), target);
  }

  // optional uint64 reg_UPRED_size = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_reg_upred_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kernel.mapRes.FuncInfo)
  return target;
}

size_t mapRes_FuncInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kernel.mapRes.FuncInfo)
  size_t total_size = 0;

  // required string funcname = 1;
  if (_internal_has_funcname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string srcFileSet = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(srcfileset_.size());
  for (int i = 0, n = srcfileset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      srcfileset_.Get(i));
  }

  // repeated string codeSet = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codeset_.size());
  for (int i = 0, n = codeset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codeset_.Get(i));
  }

  // map<uint64, .kernel.mapRes.FuncInfo.SASSLineInfo> map_offset_src = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_offset_src_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::kernel::mapRes_FuncInfo_SASSLineInfo >::const_iterator
      it = this->_internal_map_offset_src().begin();
      it != this->_internal_map_offset_src().end(); ++it) {
    total_size += mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .kernel.mapRes.FuncInfo.SASSLineInfo SASSLine = 5;
  total_size += 1UL * this->_internal_sassline_size();
  for (const auto& msg : this->sassline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional uint64 reg_GPR_size = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reg_gpr_size());
    }

    // optional uint64 reg_PRED_size = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reg_pred_size());
    }

    // optional uint64 reg_UGPR_size = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reg_ugpr_size());
    }

    // optional uint64 reg_UPRED_size = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reg_upred_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapRes_FuncInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mapRes_FuncInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapRes_FuncInfo::GetClassData() const { return &_class_data_; }

void mapRes_FuncInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mapRes_FuncInfo *>(to)->MergeFrom(
      static_cast<const mapRes_FuncInfo &>(from));
}


void mapRes_FuncInfo::MergeFrom(const mapRes_FuncInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kernel.mapRes.FuncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  srcfileset_.MergeFrom(from.srcfileset_);
  codeset_.MergeFrom(from.codeset_);
  map_offset_src_.MergeFrom(from.map_offset_src_);
  sassline_.MergeFrom(from.sassline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_funcname(from._internal_funcname());
    }
    if (cached_has_bits & 0x00000002u) {
      reg_gpr_size_ = from.reg_gpr_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      reg_pred_size_ = from.reg_pred_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      reg_ugpr_size_ = from.reg_ugpr_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      reg_upred_size_ = from.reg_upred_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapRes_FuncInfo::CopyFrom(const mapRes_FuncInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kernel.mapRes.FuncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapRes_FuncInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map_offset_src_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sassline_)) return false;
  return true;
}

void mapRes_FuncInfo::InternalSwap(mapRes_FuncInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcfileset_.InternalSwap(&other->srcfileset_);
  codeset_.InternalSwap(&other->codeset_);
  map_offset_src_.InternalSwap(&other->map_offset_src_);
  sassline_.InternalSwap(&other->sassline_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &funcname_, GetArenaForAllocation(),
      &other->funcname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo, reg_upred_size_)
      + sizeof(mapRes_FuncInfo::reg_upred_size_)
      - PROTOBUF_FIELD_OFFSET(mapRes_FuncInfo, reg_gpr_size_)>(
          reinterpret_cast<char*>(&reg_gpr_size_),
          reinterpret_cast<char*>(&other->reg_gpr_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mapRes_FuncInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[4]);
}

// ===================================================================

class mapRes::_Internal {
 public:
};

mapRes::mapRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  testmap_(arena),
  fi_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kernel.mapRes)
}
mapRes::mapRes(const mapRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fi_(from.fi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testmap_.MergeFrom(from.testmap_);
  // @@protoc_insertion_point(copy_constructor:kernel.mapRes)
}

inline void mapRes::SharedCtor() {
}

mapRes::~mapRes() {
  // @@protoc_insertion_point(destructor:kernel.mapRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mapRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mapRes::ArenaDtor(void* object) {
  mapRes* _this = reinterpret_cast< mapRes* >(object);
  (void)_this;
  _this->testmap_. ~MapField();
}
inline void mapRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &mapRes::ArenaDtor);
  }
}
void mapRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mapRes::Clear() {
// @@protoc_insertion_point(message_clear_start:kernel.mapRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testmap_.Clear();
  fi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .kernel.mapRes.FuncInfo> testMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&testmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kernel.mapRes.FuncInfo FI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kernel.mapRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .kernel.mapRes.FuncInfo> testMap = 1;
  if (!this->_internal_testmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kernel::mapRes_FuncInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "kernel.mapRes.TestMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_testmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_testmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kernel::mapRes_FuncInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kernel::mapRes_FuncInfo >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = mapRes_TestMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kernel::mapRes_FuncInfo >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it) {
        target = mapRes_TestMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .kernel.mapRes.FuncInfo FI = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fi(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kernel.mapRes)
  return target;
}

size_t mapRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kernel.mapRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .kernel.mapRes.FuncInfo> testMap = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kernel::mapRes_FuncInfo >::const_iterator
      it = this->_internal_testmap().begin();
      it != this->_internal_testmap().end(); ++it) {
    total_size += mapRes_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .kernel.mapRes.FuncInfo FI = 2;
  total_size += 1UL * this->_internal_fi_size();
  for (const auto& msg : this->fi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mapRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapRes::GetClassData() const { return &_class_data_; }

void mapRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mapRes *>(to)->MergeFrom(
      static_cast<const mapRes &>(from));
}


void mapRes::MergeFrom(const mapRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kernel.mapRes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testmap_.MergeFrom(from.testmap_);
  fi_.MergeFrom(from.fi_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapRes::CopyFrom(const mapRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kernel.mapRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapRes::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(testmap_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fi_)) return false;
  return true;
}

void mapRes::InternalSwap(mapRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  testmap_.InternalSwap(&other->testmap_);
  fi_.InternalSwap(&other->fi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapRes_2eproto_getter, &descriptor_table_mapRes_2eproto_once,
      file_level_metadata_mapRes_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kernel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kernel::mapRes_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::kernel::mapRes_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse* Arena::CreateMaybeMessage< ::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes_FuncInfo_MapOffsetSrcEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kernel::mapRes_FuncInfo_SASSLineInfo_Register* Arena::CreateMaybeMessage< ::kernel::mapRes_FuncInfo_SASSLineInfo_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes_FuncInfo_SASSLineInfo_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::kernel::mapRes_FuncInfo_SASSLineInfo* Arena::CreateMaybeMessage< ::kernel::mapRes_FuncInfo_SASSLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes_FuncInfo_SASSLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kernel::mapRes_FuncInfo* Arena::CreateMaybeMessage< ::kernel::mapRes_FuncInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes_FuncInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kernel::mapRes* Arena::CreateMaybeMessage< ::kernel::mapRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kernel::mapRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
